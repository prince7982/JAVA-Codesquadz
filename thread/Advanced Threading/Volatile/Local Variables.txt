Local Variables in the Thread

If you are working with the multithreaded programming, the volatile keyword will be more
useful. When multiple threads using the same variable, each thread will have its own copy of
the local cache for that variable. So, when it’s updating the value, it is actually updated 
in the local cache not in the main variable memory. The other thread which is using the same 
variable doesn’t know anything about the values changed by the another thread. To avoid this 
problem, if you declare a variable as volatile, then it will not be stored in the local 
cache. Whenever thread are updating the values, it is updated to the main memory. So, other 
threads can access the updated value.

The Java volatile keyword is used to mark a Java variable as "being stored in main memory". 
More precisely that means, that every read of a volatile variable will be read from the 
computer's main memory, and not from the CPU cache, and that every write to a volatile 
variable will be written to main memory, and not just to the CPU cache.