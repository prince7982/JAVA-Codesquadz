A Stream in Java can be defined as a sequence of elements from a source. The source of
elements here refers to a Collection or Array that provides data to the Stream.

    Java streams are designed in such a way that most of the stream operations (called
    intermediate operations) return a Stream. This helps to create a chain of stream
    operations. This is called stream pipe-lining.
    Java streams also support the aggregate or terminal operations on the elements. The
    aggregate operations are operations that allow us to express common manipulations on
    stream elements quickly and clearly, for example, finding the max or min element, finding
    the first element matching giving criteria, and so on.
    Not that a stream maintains the same ordering of the elements as the ordering in the
    stream source.

A Collection is an in-memory data structure, which holds all the values that the data
structure currently has.
While a Stream is conceptually a pipeline, in which elements are computed on demand.

In Java, java.util.Stream interface represents a stream on which one or more operations can
be performed.

Stream operations are either intermediate or terminal.

The terminal operations return a result of a certain type and intermediate operations return
the stream itself so we can chain multiple methods in a row to perform the operation in
multiple steps.

Streams are created on a source, e.g. a java.util.Collection like List or Set

Stream operations can either be executed sequentially or parallel. When performed parallelly,
it is called a parallel stream.

A stream is:

    Not a data structure  
    Designed for lambdas  
    Do not support indexed access  
    Can easily be aggregated as arrays or lists  
    Lazy access supported  
    Parallelizable
